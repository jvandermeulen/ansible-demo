---
# This role depends on tasks from nagiosrepo role
#
- include: ncpa_version1.yml
  when: update_from_version_1x

    
- name: install ncpa client latest
  yum:
    name: ncpa
    state: latest
    enablerepo: nagios-base
  notify:
  - restart ncpa

- name:  ncpa services should be enabled
  service:
    name: "{{ item }}"
    state: started
    enabled: true
  with_items:
    - ncpa_passive
    - ncpa_listener

- name: open firewall for ncpa
  firewalld:
    port: "{{ ncpa_port }}/tcp"
    state: enabled
    permanent: true
    immediate: true
  when: (ansible_distribution == "RedHat" and ansible_distribution_major_version > '6') or  (ansible_distribution == "CentOS" and ansible_distribution_major_version > "6")

# de lineinfile module vervangt helaas CRLF door CRLF,LF. Overigens is door Nagios Ent. het probleem opgelost met linefeeds
#- name:  change token (community string)
#  lineinfile:
#    dest: /usr/local/ncpa/etc/ncpa.cfg
#    regexp: "^community_string ="
#    line: "community_string = {{ ncpa_token }}"

- name:  change token (community string)
  replace:
    dest: /usr/local/ncpa/etc/ncpa.cfg
    backup: true
    regexp: '^community_string =.*$'
    replace: 'community_string = {{ ncpa_token | default("demo-token") }}'
  notify:
  - restart ncpa


- name: Copy several ncpa plugins
  copy:
    src: "{{ item }}"
    dest: "/usr/local/ncpa/plugins/{{ item }}"
    owner: nagios
    mode: '750'
  with_items:
    - hostname_selinux.sh
    - service_active.sh
    
- name: Make sure existing files are owned by Nagios # NCPA 2.x runs as nagios while NCPA 1.x runs as root
  file:
    path: "/usr/local/ncpa/plugins/"
    state: directory
    recurse: yes
    mode: 0750
    owner: nagios
    group: nagios
    
# Nagios XI is capable of reading configfiles in MariaDB.
# The "apply config" can be automated using Nagios XI API commands, as a matter of fact creating hosts and services can
# be created (and modified/deleted) using XI's API.

# Creating config files for seperate hosts and services is definitely NOT recommended for production.
# A better approach is:
# Create hostgroup(s), host template(s) and "group checks"  (service checks using the hostgroup as a target)  

- name: Create import dir
  file:
    path: "/usr/local/nagios/etc/import/"
    state: directory
    owner: nagios
    mode: 0755
  delegate_to: monitor
  
# See comments above section [create import dir]
- name: template for nagios client hosts
  template:
    src: ../templates/host-linuxtemplate.cfg
    dest: "/usr/local/nagios/etc/import/host{{ inventory_hostname }}.cfg"
    owner: nagios
    group: nagios
    mode: 0755
  delegate_to: monitor

# See comments above section [create import dir]
- name: template for nagios client services
  template:
    src: ../templates/svc-linuxtemplate.cfg
    dest: "/usr/local/nagios/etc/import/svc{{ inventory_hostname }}.cfg"
    owner: nagios
    group: nagios
    mode: 0755
  delegate_to: monitor
